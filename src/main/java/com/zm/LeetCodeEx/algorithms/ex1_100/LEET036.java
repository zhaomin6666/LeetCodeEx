package com.zm.LeetCodeEx.algorithms.ex1_100;

/**
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。 数字 1-9 在每一列只能出现一次。 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 * <p>
 * 示例 1:
 * <p>
 * 输入: [
 * <p>
 * ["5","3",".",".","7",".",".",".","."], </br>
 * ["6",".",".","1","9","5",".",".","."], </br>
 * [".","9","8",".",".",".",".","6","."], </br>
 * ["8",".",".",".","6",".",".",".","3"], </br>
 * ["4",".",".","8",".","3",".",".","1"], </br>
 * ["7",".",".",".","2",".",".",".","6"], </br>
 * [".","6",".",".",".",".","2","8","."], </br>
 * [".",".",".","4","1","9",".",".","5"], </br>
 * [".",".",".",".","8",".",".","7","9"] </br>
 * <p>
 * ] 输出: true
 * <p>
 * 示例 2:
 * <p>
 * 输入: [
 * <p>
 * ["8","3",".",".","7",".",".",".","."], </br>
 * ["6",".",".","1","9","5",".",".","."], </br>
 * [".","9","8",".",".",".",".","6","."], </br>
 * ["8",".",".",".","6",".",".",".","3"], </br>
 * ["4",".",".","8",".","3",".",".","1"], </br>
 * ["7",".",".",".","2",".",".",".","6"], </br>
 * [".","6",".",".",".",".","2","8","."], </br>
 * [".",".",".","4","1","9",".",".","5"], </br>
 * [".",".",".",".","8",".",".","7","9"] </br>
 * <p>
 * ]
 * <p>
 * 输出: false 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8
 * 存在, 因此这个数独是无效的。
 * <p>
 * 说明:
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。 只需要根据以上规则，验证已经填入的数字是否有效即可。 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * @author zm
 */
public class LEET036 {
    public static void main(String[] args) {
        LEET036 l036 = new LEET036();
        char[][] board1 = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'}, {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'}, {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'}, {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'}, {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        char[][] board2 = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'}, {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'}, {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'}, {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'}, {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        char[][] board = {{'.', '.', '.', '.', '5', '.', '.', '4', '.'},
                {'.', '4', '.', '3', '2', '.', '.', '.', '.'}, {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
                {'8', '.', '.', '.', '.', '.', '.', '2', '.'}, {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
                {'.', '1', '5', '.', '.', '.', '.', '.', '.'}, {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '2', '.', '9', '.', '.', '.', '.', '.'}, {'.', '.', '4', '.', '.', '.', '.', '.', '.'}};
        System.out.println(l036.isValidSudoku(board1));
        System.out.println(l036.isValidSudoku(board2));
        System.out.println(l036.isValidSudoku(board));
    }

    public boolean isValidSudoku(char[][] board) {
        int[] rowCnt = new int[9];
        int[] colCnt = new int[9];
        int[] boxCnt = new int[9];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if ('.' == board[i][j]) {
                    continue;
                }
                int num = board[i][j] - 48;
                // 处理行
                if ((rowCnt[i] >> num) % 2 == 1) {
                    return false;
                } else {
                    rowCnt[i] += 1 << num;
                }
                // 处理列
                if ((colCnt[j] >> num) % 2 == 1) {
                    return false;
                } else {
                    colCnt[j] += 1 << num;
                }
                // 处理框
                int boxNum = i / 3 * 3 + j / 3;
                if ((boxCnt[boxNum] >> num) % 2 == 1) {
                    return false;
                } else {
                    boxCnt[boxNum] += 1 << num;
                }
            }
        }
        return true;
    }
}
